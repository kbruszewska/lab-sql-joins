USE sakila;

-- 1. List the number of films per category.
SELECT c.name AS category_name, COUNT(f.film_id) AS nr_film_in_category
FROM film_category f
JOIN category c
ON f.category_id = c.category_id
GROUP BY f.category_id
ORDER BY nr_film_in_category DESC;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT * from store;
SELECT * from address;
SELECT * from city;
SELECT * from country;

-- Solution 2
SELECT s.store_id, c.city, co.country
FROM store s
JOIN address a
ON s.address_id = a.address_id 
JOIN city c
ON a.city_id = c.city_id
JOIN country co
ON c.country_id = co.country_id
;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT * from store;
SELECT * from payment;
SELECT * from rental;
SELECT * from staff;

-- Solution 3
SELECT s.store_id, SUM(p.amount)
FROM store s
JOIN staff sf
ON s.store_id = sf.store_id 
JOIN rental r
ON sf.staff_id = r.staff_id
JOIN payment p
ON r.rental_id = p.rental_id
GROUP BY s.store_id
;

-- 4. Determine the average running time of films for each category.
-- (average running time = average length of all films within a category)
SELECT * FROM film;
SELECT * FROM category;
SELECT * FROM film_category;

SELECT c.name AS film_category_name, AVG(f.length) AS average_films_length
FROM film f
JOIN film_category fc
ON f.film_id = fc.film_id
JOIN category c
ON fc.category_id = c.category_id
GROUP BY fc.category_id
ORDER BY AVG(f.length) DESC;


-- Bonus:

-- 5. Identify the film categories with the longest average running time.
SELECT c.name AS top_3_categories_with_longest_average_film_length
FROM film f
JOIN film_category fc
ON f.film_id = fc.film_id
JOIN category c
ON fc.category_id = c.category_id
GROUP BY fc.category_id
ORDER BY AVG(f.length) DESC
LIMIT 3;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.film_id, f.title, COUNT(r.rental_id) AS nr_of_rentals
FROM film f
LEFT JOIN inventory i
ON f.film_id = i.film_id
LEFT JOIN rental r
ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY nr_of_rentals  DESC
LIMIT 10;
-- Here I used LEFT JOIN, because I wanted also to first see all rentals also for the films, which were not rented (so the value will be 0 for them). 

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.film_id, f.title, i.store_id
FROM film f
LEFT JOIN inventory i
ON f.film_id = i.film_id
WHERE f.title = 'Academy Dinosaur' AND i.store_id = 1
;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or
-- 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT f.title,
CASE 
WHEN i.store_id IS NOT NULL THEN 'Available' 
ELSE 'Not available' 
END AS Status_in_the_inventory
FROM film f
LEFT JOIN inventory i 
ON f.film_id = i.film_id;

-- Note for me: Here the comma in the first row was important, otherwise it was not working. 
